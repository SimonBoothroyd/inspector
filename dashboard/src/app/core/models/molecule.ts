/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The version of this model's schema.
 */
export type SchemaVersion = string;
/**
 * An ordered list of the atomic symbols of each atom in the molecule with length=n_atoms.
 */
export type Symbols1 = Symbols[];
export type Symbols = string;
/**
 * The connectivity between each atom in the ``symbols`` list. Each item must be a tuple of the form ``(atom_index_a, atom_index_b, bond_order)``.
 */
export type Connectivity = [number, number, number][];
/**
 * A flattened array of the molecules XYZ atomic coordinates [Å] with length=n_atoms*3 which can be reshaped to array with shape=(n_atoms, 3).
 * The ordering of the coordinates must match the ordering of the ``symbols`` and ``connectivity`` lists.
 */
export type Geometry = number[];
/**
 * The SMIRKS pattern describing the chemical environment that the parameter should be applied to.
 */
export type Smirks = string;
/**
 * The id assigned to the parameter.
 */
export type Id = string;
export type Type = string;
/**
 * The constraint distance [Å].
 */
export type Distance = number;
/**
 * The SMIRKS pattern describing the chemical environment that the parameter should be applied to.
 */
export type Smirks1 = string;
/**
 * The id assigned to the parameter.
 */
export type Id1 = string;
export type Type1 = string;
/**
 * The bond length [Å].
 */
export type Length = number;
/**
 * The spring constant [kcal / mol / Å**2].
 */
export type K = number;
/**
 * The SMIRKS pattern describing the chemical environment that the parameter should be applied to.
 */
export type Smirks2 = string;
/**
 * The id assigned to the parameter.
 */
export type Id2 = string;
export type Type2 = string;
/**
 * The equilibrium bond angle [deg]
 */
export type Angle = number;
/**
 * The spring constant [kcal / mol / deg**2]
 */
export type K1 = number;
/**
 * The SMIRKS pattern describing the chemical environment that the parameter should be applied to.
 */
export type Smirks3 = string;
/**
 * The id assigned to the parameter.
 */
export type Id3 = string;
/**
 * The periodicity of each torsion term.
 */
export type Periodicity = [number, ...number[]];
/**
 * The phase of each torsion term [deg].
 */
export type Phase = [number, ...number[]];
/**
 * The barrier height of each torsion term [kcal / mol].
 */
export type K2 = [number, ...number[]];
/**
 * The `idivf` value of each torsion term.
 */
export type Idivf = number[];
export type Type3 = string;
/**
 * The SMIRKS pattern describing the chemical environment that the parameter should be applied to.
 */
export type Smirks4 = string;
/**
 * The id assigned to the parameter.
 */
export type Id4 = string;
/**
 * The periodicity of each torsion term.
 */
export type Periodicity1 = [number, ...number[]];
/**
 * The phase of each torsion term [deg].
 */
export type Phase1 = [number, ...number[]];
/**
 * The barrier height of each torsion term [kcal / mol].
 */
export type K3 = [number, ...number[]];
/**
 * The `idivf` value of each torsion term.
 */
export type Idivf1 = number[];
export type Type4 = string;
/**
 * The SMIRKS pattern describing the chemical environment that the parameter should be applied to.
 */
export type Smirks5 = string;
/**
 * The id assigned to the parameter.
 */
export type Id5 = string;
export type Type5 = string;
/**
 * The epsilon parameter [kcal / mol].
 */
export type Epsilon = number;
/**
 * The sigma parameter [Å].
 */
export type Sigma = number;
/**
 * The SMIRKS pattern describing the chemical environment that the parameter should be applied to.
 */
export type Smirks6 = string;
/**
 * The id assigned to the parameter.
 */
export type Id6 = string;
export type Type6 = string;
/**
 * The charge of each tagged atom [e].
 */
export type Charge = [number, ...number[]];
/**
 * The SMIRKS pattern describing the chemical environment that the parameter should be applied to.
 */
export type Smirks7 = string;
/**
 * The id assigned to the parameter.
 */
export type Id7 = string;
export type Type7 = string;
/**
 * The charge increment to apply to each tagged atom [e].
 */
export type ChargeIncrement = [number, ...number[]];
/**
 * A list of bond lengths [Å], stored as tuples of the form ``(atom_index_a, atom_index_b, length)``.
 */
export type BondLengths =
  | []
  | [number]
  | [number, number]
  | [number, number, number][];
/**
 * A list of bond lengths [deg], stored as tuples of the form ``(atom_index_a, atom_index_b, atom_index_c, angle)``.
 */
export type BondAngles =
  | []
  | [number]
  | [number, number]
  | [number, number, number]
  | [number, number, number, number][];
/**
 * A list of proper dihedral angles [deg], stored as tuples of the form ``(atom_index_a, atom_index_b, atom_index_c, atom_index_d, angle)``.
 */
export type ProperDihedralAngles =
  | []
  | [number]
  | [number, number]
  | [number, number, number]
  | [number, number, number, number]
  | [number, number, number, number, number][];
/**
 * A list of atoms involved in hydrogen bonds stored as tuples of the form ``(donor_index, h_index, acceptor_index)``.
 */
export type HydrogenBonds =
  | []
  | [number]
  | [number, number]
  | [number, number, number][];
/**
 * A flattened array of the molecules XYZ atomic coordinates [Å] with length=n_atoms*3 which can be reshaped to array with shape=(n_atoms, 3).
 */
export type Geometry1 = number[];
/**
 * The potential energy of the molecule at this frame [kJ / mol].
 */
export type PotentialEnergy = number;
/**
 * The outputs of each iteration of the minimization.
 */
export type Frames = MinimizationFrame[];

/**
 * A compact, minimal representation of a molecule which can be served from or
 * received by the RESTful API.
 */
export interface RESTMolecule {
  schema_version?: SchemaVersion;
  symbols: Symbols1;
  connectivity: Connectivity;
  geometry: Geometry;

  [k: string]: unknown;
}

export interface AppliedParameters {
  parameters: Parameters;
  parameter_map: ParameterMap;

  [k: string]: unknown;
}

/**
 * A dictionary of the parameters applied to the molecule, where each key is the name of a SMIRNOFF parameter and each value a list of theapplied parameters associated with that handler.
 */
export interface Parameters {
  [k: string]: (
    | ConstraintType
    | BondType
    | AngleType
    | ProperTorsionType
    | ImproperTorsionType
    | VdWType
    | LibraryChargeType
    | ChargeIncrementType
  )[];
}

/**
 * A pydantic representation of a SMIRNOFF constraint type.
 */
export interface ConstraintType {
  smirks: Smirks;
  id: Id;
  type?: Type;
  distance: Distance;

  [k: string]: unknown;
}

/**
 * A pydantic representation of a SMIRNOFF bond type.
 */
export interface BondType {
  smirks: Smirks1;
  id: Id1;
  type?: Type1;
  length: Length;
  k: K;

  [k: string]: unknown;
}

/**
 * A pydantic representation of a SMIRNOFF angle type.
 */
export interface AngleType {
  smirks: Smirks2;
  id: Id2;
  type?: Type2;
  angle: Angle;
  k: K1;

  [k: string]: unknown;
}

/**
 * A pydantic representation of a SMIRNOFF torsion type for proper torsions.
 */
export interface ProperTorsionType {
  smirks: Smirks3;
  id: Id3;
  periodicity: Periodicity;
  phase: Phase;
  k: K2;
  idivf: Idivf;
  type?: Type3;

  [k: string]: unknown;
}

/**
 * A pydantic representation of a SMIRNOFF torsion type for improper torsions.
 */
export interface ImproperTorsionType {
  smirks: Smirks4;
  id: Id4;
  periodicity: Periodicity1;
  phase: Phase1;
  k: K3;
  idivf: Idivf1;
  type?: Type4;

  [k: string]: unknown;
}

/**
 * A pydantic representation of a SMIRNOFF vdWForce type.
 */
export interface VdWType {
  smirks: Smirks5;
  id: Id5;
  type?: Type5;
  epsilon: Epsilon;
  sigma: Sigma;

  [k: string]: unknown;
}

/**
 * A pydantic representation of a SMIRNOFF Library Charge type.
 */
export interface LibraryChargeType {
  smirks: Smirks6;
  id: Id6;
  type?: Type6;
  charge: Charge;

  [k: string]: unknown;
}

/**
 * A pydantic representation of a SMIRNOFF bond charge correction type.
 */
export interface ChargeIncrementType {
  smirks: Smirks7;
  id: Id7;
  type?: Type7;
  charge_increment: ChargeIncrement;

  [k: string]: unknown;
}

/**
 * A map between a the id of each applied parameter and a list of the indices of each group of atoms that the parameter is applied to.
 * For bond parameters for e.g. the value will be a list of tuples of two indices, while for torsions each tuple will contain four atom indices.
 */
export interface ParameterMap {
  [k: string]: number[][];
}

export interface GeometrySummary {
  bond_lengths: BondLengths;
  bond_angles: BondAngles;
  proper_dihedral_angles: ProperDihedralAngles;
  hydrogen_bonds: HydrogenBonds;

  [k: string]: unknown;
}

/**
 * Contains the trajectory of outputs (both conformers and energies) produced by each
 * iteration of an energy minimization.
 */
export interface MinimizationTrajectory {
  frames: Frames;

  [k: string]: unknown;
}

/**
 * Contains the output of a single iteration from an energy minimization.
 */
export interface MinimizationFrame {
  geometry: Geometry1;
  potential_energy: PotentialEnergy;

  [k: string]: unknown;
}
